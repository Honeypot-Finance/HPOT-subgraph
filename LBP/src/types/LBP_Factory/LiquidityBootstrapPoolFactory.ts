// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class FeeRecipientSet extends ethereum.Event {
  get params(): FeeRecipientSet__Params {
    return new FeeRecipientSet__Params(this);
  }
}

export class FeeRecipientSet__Params {
  _event: FeeRecipientSet;

  constructor(event: FeeRecipientSet) {
    this._event = event;
  }

  get recipient(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class OwnershipHandoverCanceled extends ethereum.Event {
  get params(): OwnershipHandoverCanceled__Params {
    return new OwnershipHandoverCanceled__Params(this);
  }
}

export class OwnershipHandoverCanceled__Params {
  _event: OwnershipHandoverCanceled;

  constructor(event: OwnershipHandoverCanceled) {
    this._event = event;
  }

  get pendingOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class OwnershipHandoverRequested extends ethereum.Event {
  get params(): OwnershipHandoverRequested__Params {
    return new OwnershipHandoverRequested__Params(this);
  }
}

export class OwnershipHandoverRequested__Params {
  _event: OwnershipHandoverRequested;

  constructor(event: OwnershipHandoverRequested) {
    this._event = event;
  }

  get pendingOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get oldOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PlatformFeeSet extends ethereum.Event {
  get params(): PlatformFeeSet__Params {
    return new PlatformFeeSet__Params(this);
  }
}

export class PlatformFeeSet__Params {
  _event: PlatformFeeSet;

  constructor(event: PlatformFeeSet) {
    this._event = event;
  }

  get fee(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class PoolCreated extends ethereum.Event {
  get params(): PoolCreated__Params {
    return new PoolCreated__Params(this);
  }
}

export class PoolCreated__Params {
  _event: PoolCreated;

  constructor(event: PoolCreated) {
    this._event = event;
  }

  get pool(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class SwapFeeSet extends ethereum.Event {
  get params(): SwapFeeSet__Params {
    return new SwapFeeSet__Params(this);
  }
}

export class SwapFeeSet__Params {
  _event: SwapFeeSet;

  constructor(event: SwapFeeSet) {
    this._event = event;
  }

  get fee(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class LiquidityBootstrapPoolFactory__createLiquidityBootstrapPoolInputArgsStruct extends ethereum.Tuple {
  get asset(): Address {
    return this[0].toAddress();
  }

  get share(): Address {
    return this[1].toAddress();
  }

  get creator(): Address {
    return this[2].toAddress();
  }

  get virtualAssets(): BigInt {
    return this[3].toBigInt();
  }

  get maxSharePrice(): BigInt {
    return this[4].toBigInt();
  }

  get maxSharesOut(): BigInt {
    return this[5].toBigInt();
  }

  get maxTotalAssetsIn(): BigInt {
    return this[6].toBigInt();
  }

  get maxTotalAssetsInDeviation(): BigInt {
    return this[7].toBigInt();
  }

  get weightStart(): BigInt {
    return this[8].toBigInt();
  }

  get weightEnd(): BigInt {
    return this[9].toBigInt();
  }

  get saleStart(): BigInt {
    return this[10].toBigInt();
  }

  get saleEnd(): BigInt {
    return this[11].toBigInt();
  }

  get vestCliff(): BigInt {
    return this[12].toBigInt();
  }

  get vestEnd(): BigInt {
    return this[13].toBigInt();
  }

  get redemptionDelay(): BigInt {
    return this[14].toBigInt();
  }

  get sellingAllowed(): boolean {
    return this[15].toBoolean();
  }

  get whitelistMerkleRoot(): Bytes {
    return this[16].toBytes();
  }

  get minAssetsIn(): BigInt {
    return this[17].toBigInt();
  }

  get minPercAssetsSeeding(): BigInt {
    return this[18].toBigInt();
  }

  get minSharesSeeding(): BigInt {
    return this[19].toBigInt();
  }
}

export class LiquidityBootstrapPoolFactory__factorySettingsResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: Address, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getFeeRecipient(): Address {
    return this.value0;
  }

  getPlatformFee(): BigInt {
    return this.value1;
  }

  getSwapFee(): BigInt {
    return this.value2;
  }
}

export class LiquidityBootstrapPoolFactory__predictDeterministicAddressInputArgsStruct extends ethereum.Tuple {
  get asset(): Address {
    return this[0].toAddress();
  }

  get share(): Address {
    return this[1].toAddress();
  }

  get creator(): Address {
    return this[2].toAddress();
  }

  get virtualAssets(): BigInt {
    return this[3].toBigInt();
  }

  get maxSharePrice(): BigInt {
    return this[4].toBigInt();
  }

  get maxSharesOut(): BigInt {
    return this[5].toBigInt();
  }

  get maxTotalAssetsIn(): BigInt {
    return this[6].toBigInt();
  }

  get maxTotalAssetsInDeviation(): BigInt {
    return this[7].toBigInt();
  }

  get weightStart(): BigInt {
    return this[8].toBigInt();
  }

  get weightEnd(): BigInt {
    return this[9].toBigInt();
  }

  get saleStart(): BigInt {
    return this[10].toBigInt();
  }

  get saleEnd(): BigInt {
    return this[11].toBigInt();
  }

  get vestCliff(): BigInt {
    return this[12].toBigInt();
  }

  get vestEnd(): BigInt {
    return this[13].toBigInt();
  }

  get redemptionDelay(): BigInt {
    return this[14].toBigInt();
  }

  get sellingAllowed(): boolean {
    return this[15].toBoolean();
  }

  get whitelistMerkleRoot(): Bytes {
    return this[16].toBytes();
  }

  get minAssetsIn(): BigInt {
    return this[17].toBigInt();
  }

  get minPercAssetsSeeding(): BigInt {
    return this[18].toBigInt();
  }

  get minSharesSeeding(): BigInt {
    return this[19].toBigInt();
  }
}

export class LiquidityBootstrapPoolFactory__predictInitCodeHashInputArgsStruct extends ethereum.Tuple {
  get asset(): Address {
    return this[0].toAddress();
  }

  get share(): Address {
    return this[1].toAddress();
  }

  get creator(): Address {
    return this[2].toAddress();
  }

  get virtualAssets(): BigInt {
    return this[3].toBigInt();
  }

  get maxSharePrice(): BigInt {
    return this[4].toBigInt();
  }

  get maxSharesOut(): BigInt {
    return this[5].toBigInt();
  }

  get maxTotalAssetsIn(): BigInt {
    return this[6].toBigInt();
  }

  get maxTotalAssetsInDeviation(): BigInt {
    return this[7].toBigInt();
  }

  get weightStart(): BigInt {
    return this[8].toBigInt();
  }

  get weightEnd(): BigInt {
    return this[9].toBigInt();
  }

  get saleStart(): BigInt {
    return this[10].toBigInt();
  }

  get saleEnd(): BigInt {
    return this[11].toBigInt();
  }

  get vestCliff(): BigInt {
    return this[12].toBigInt();
  }

  get vestEnd(): BigInt {
    return this[13].toBigInt();
  }

  get redemptionDelay(): BigInt {
    return this[14].toBigInt();
  }

  get sellingAllowed(): boolean {
    return this[15].toBoolean();
  }

  get whitelistMerkleRoot(): Bytes {
    return this[16].toBytes();
  }

  get minAssetsIn(): BigInt {
    return this[17].toBigInt();
  }

  get minPercAssetsSeeding(): BigInt {
    return this[18].toBigInt();
  }

  get minSharesSeeding(): BigInt {
    return this[19].toBigInt();
  }
}

export class LiquidityBootstrapPoolFactory extends ethereum.SmartContract {
  static bind(address: Address): LiquidityBootstrapPoolFactory {
    return new LiquidityBootstrapPoolFactory(
      "LiquidityBootstrapPoolFactory",
      address
    );
  }

  UNISWAP_V2_ROUTER(): Address {
    let result = super.call(
      "UNISWAP_V2_ROUTER",
      "UNISWAP_V2_ROUTER():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_UNISWAP_V2_ROUTER(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "UNISWAP_V2_ROUTER",
      "UNISWAP_V2_ROUTER():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  createLiquidityBootstrapPool(
    args: LiquidityBootstrapPoolFactory__createLiquidityBootstrapPoolInputArgsStruct,
    shares: BigInt,
    assets: BigInt,
    salt: Bytes
  ): Address {
    let result = super.call(
      "createLiquidityBootstrapPool",
      "createLiquidityBootstrapPool((address,address,address,uint256,uint256,uint256,uint256,uint40,uint64,uint64,uint40,uint40,uint40,uint40,uint40,bool,bytes32,uint256,uint48,uint256),uint256,uint256,bytes32):(address)",
      [
        ethereum.Value.fromTuple(args),
        ethereum.Value.fromUnsignedBigInt(shares),
        ethereum.Value.fromUnsignedBigInt(assets),
        ethereum.Value.fromFixedBytes(salt)
      ]
    );

    return result[0].toAddress();
  }

  try_createLiquidityBootstrapPool(
    args: LiquidityBootstrapPoolFactory__createLiquidityBootstrapPoolInputArgsStruct,
    shares: BigInt,
    assets: BigInt,
    salt: Bytes
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "createLiquidityBootstrapPool",
      "createLiquidityBootstrapPool((address,address,address,uint256,uint256,uint256,uint256,uint40,uint64,uint64,uint40,uint40,uint40,uint40,uint40,bool,bytes32,uint256,uint48,uint256),uint256,uint256,bytes32):(address)",
      [
        ethereum.Value.fromTuple(args),
        ethereum.Value.fromUnsignedBigInt(shares),
        ethereum.Value.fromUnsignedBigInt(assets),
        ethereum.Value.fromFixedBytes(salt)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  factorySettings(): LiquidityBootstrapPoolFactory__factorySettingsResult {
    let result = super.call(
      "factorySettings",
      "factorySettings():(address,uint48,uint48)",
      []
    );

    return new LiquidityBootstrapPoolFactory__factorySettingsResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_factorySettings(): ethereum.CallResult<
    LiquidityBootstrapPoolFactory__factorySettingsResult
  > {
    let result = super.tryCall(
      "factorySettings",
      "factorySettings():(address,uint48,uint48)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new LiquidityBootstrapPoolFactory__factorySettingsResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownershipHandoverExpiresAt(pendingOwner: Address): BigInt {
    let result = super.call(
      "ownershipHandoverExpiresAt",
      "ownershipHandoverExpiresAt(address):(uint256)",
      [ethereum.Value.fromAddress(pendingOwner)]
    );

    return result[0].toBigInt();
  }

  try_ownershipHandoverExpiresAt(
    pendingOwner: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "ownershipHandoverExpiresAt",
      "ownershipHandoverExpiresAt(address):(uint256)",
      [ethereum.Value.fromAddress(pendingOwner)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  predictDeterministicAddress(
    args: LiquidityBootstrapPoolFactory__predictDeterministicAddressInputArgsStruct,
    salt: Bytes
  ): Address {
    let result = super.call(
      "predictDeterministicAddress",
      "predictDeterministicAddress((address,address,address,uint256,uint256,uint256,uint256,uint40,uint64,uint64,uint40,uint40,uint40,uint40,uint40,bool,bytes32,uint256,uint48,uint256),bytes32):(address)",
      [ethereum.Value.fromTuple(args), ethereum.Value.fromFixedBytes(salt)]
    );

    return result[0].toAddress();
  }

  try_predictDeterministicAddress(
    args: LiquidityBootstrapPoolFactory__predictDeterministicAddressInputArgsStruct,
    salt: Bytes
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "predictDeterministicAddress",
      "predictDeterministicAddress((address,address,address,uint256,uint256,uint256,uint256,uint40,uint64,uint64,uint40,uint40,uint40,uint40,uint40,bool,bytes32,uint256,uint48,uint256),bytes32):(address)",
      [ethereum.Value.fromTuple(args), ethereum.Value.fromFixedBytes(salt)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  predictInitCodeHash(
    args: LiquidityBootstrapPoolFactory__predictInitCodeHashInputArgsStruct
  ): Bytes {
    let result = super.call(
      "predictInitCodeHash",
      "predictInitCodeHash((address,address,address,uint256,uint256,uint256,uint256,uint40,uint64,uint64,uint40,uint40,uint40,uint40,uint40,bool,bytes32,uint256,uint48,uint256)):(bytes32)",
      [ethereum.Value.fromTuple(args)]
    );

    return result[0].toBytes();
  }

  try_predictInitCodeHash(
    args: LiquidityBootstrapPoolFactory__predictInitCodeHashInputArgsStruct
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "predictInitCodeHash",
      "predictInitCodeHash((address,address,address,uint256,uint256,uint256,uint256,uint40,uint64,uint64,uint40,uint40,uint40,uint40,uint40,bool,bytes32,uint256,uint48,uint256)):(bytes32)",
      [ethereum.Value.fromTuple(args)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _implementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _owner(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _feeRecipient(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _platformFee(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _swapFee(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _uniswapV2Router(): Address {
    return this._call.inputValues[5].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CancelOwnershipHandoverCall extends ethereum.Call {
  get inputs(): CancelOwnershipHandoverCall__Inputs {
    return new CancelOwnershipHandoverCall__Inputs(this);
  }

  get outputs(): CancelOwnershipHandoverCall__Outputs {
    return new CancelOwnershipHandoverCall__Outputs(this);
  }
}

export class CancelOwnershipHandoverCall__Inputs {
  _call: CancelOwnershipHandoverCall;

  constructor(call: CancelOwnershipHandoverCall) {
    this._call = call;
  }
}

export class CancelOwnershipHandoverCall__Outputs {
  _call: CancelOwnershipHandoverCall;

  constructor(call: CancelOwnershipHandoverCall) {
    this._call = call;
  }
}

export class CompleteOwnershipHandoverCall extends ethereum.Call {
  get inputs(): CompleteOwnershipHandoverCall__Inputs {
    return new CompleteOwnershipHandoverCall__Inputs(this);
  }

  get outputs(): CompleteOwnershipHandoverCall__Outputs {
    return new CompleteOwnershipHandoverCall__Outputs(this);
  }
}

export class CompleteOwnershipHandoverCall__Inputs {
  _call: CompleteOwnershipHandoverCall;

  constructor(call: CompleteOwnershipHandoverCall) {
    this._call = call;
  }

  get pendingOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class CompleteOwnershipHandoverCall__Outputs {
  _call: CompleteOwnershipHandoverCall;

  constructor(call: CompleteOwnershipHandoverCall) {
    this._call = call;
  }
}

export class CreateLiquidityBootstrapPoolCall extends ethereum.Call {
  get inputs(): CreateLiquidityBootstrapPoolCall__Inputs {
    return new CreateLiquidityBootstrapPoolCall__Inputs(this);
  }

  get outputs(): CreateLiquidityBootstrapPoolCall__Outputs {
    return new CreateLiquidityBootstrapPoolCall__Outputs(this);
  }
}

export class CreateLiquidityBootstrapPoolCall__Inputs {
  _call: CreateLiquidityBootstrapPoolCall;

  constructor(call: CreateLiquidityBootstrapPoolCall) {
    this._call = call;
  }

  get args(): CreateLiquidityBootstrapPoolCallArgsStruct {
    return changetype<CreateLiquidityBootstrapPoolCallArgsStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get shares(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get assets(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get salt(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class CreateLiquidityBootstrapPoolCall__Outputs {
  _call: CreateLiquidityBootstrapPoolCall;

  constructor(call: CreateLiquidityBootstrapPoolCall) {
    this._call = call;
  }

  get pool(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class CreateLiquidityBootstrapPoolCallArgsStruct extends ethereum.Tuple {
  get asset(): Address {
    return this[0].toAddress();
  }

  get share(): Address {
    return this[1].toAddress();
  }

  get creator(): Address {
    return this[2].toAddress();
  }

  get virtualAssets(): BigInt {
    return this[3].toBigInt();
  }

  get maxSharePrice(): BigInt {
    return this[4].toBigInt();
  }

  get maxSharesOut(): BigInt {
    return this[5].toBigInt();
  }

  get maxTotalAssetsIn(): BigInt {
    return this[6].toBigInt();
  }

  get maxTotalAssetsInDeviation(): BigInt {
    return this[7].toBigInt();
  }

  get weightStart(): BigInt {
    return this[8].toBigInt();
  }

  get weightEnd(): BigInt {
    return this[9].toBigInt();
  }

  get saleStart(): BigInt {
    return this[10].toBigInt();
  }

  get saleEnd(): BigInt {
    return this[11].toBigInt();
  }

  get vestCliff(): BigInt {
    return this[12].toBigInt();
  }

  get vestEnd(): BigInt {
    return this[13].toBigInt();
  }

  get redemptionDelay(): BigInt {
    return this[14].toBigInt();
  }

  get sellingAllowed(): boolean {
    return this[15].toBoolean();
  }

  get whitelistMerkleRoot(): Bytes {
    return this[16].toBytes();
  }

  get minAssetsIn(): BigInt {
    return this[17].toBigInt();
  }

  get minPercAssetsSeeding(): BigInt {
    return this[18].toBigInt();
  }

  get minSharesSeeding(): BigInt {
    return this[19].toBigInt();
  }
}

export class ModifySettingsCall extends ethereum.Call {
  get inputs(): ModifySettingsCall__Inputs {
    return new ModifySettingsCall__Inputs(this);
  }

  get outputs(): ModifySettingsCall__Outputs {
    return new ModifySettingsCall__Outputs(this);
  }
}

export class ModifySettingsCall__Inputs {
  _call: ModifySettingsCall;

  constructor(call: ModifySettingsCall) {
    this._call = call;
  }

  get feeRecipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get platformFee(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get swapFee(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ModifySettingsCall__Outputs {
  _call: ModifySettingsCall;

  constructor(call: ModifySettingsCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RequestOwnershipHandoverCall extends ethereum.Call {
  get inputs(): RequestOwnershipHandoverCall__Inputs {
    return new RequestOwnershipHandoverCall__Inputs(this);
  }

  get outputs(): RequestOwnershipHandoverCall__Outputs {
    return new RequestOwnershipHandoverCall__Outputs(this);
  }
}

export class RequestOwnershipHandoverCall__Inputs {
  _call: RequestOwnershipHandoverCall;

  constructor(call: RequestOwnershipHandoverCall) {
    this._call = call;
  }
}

export class RequestOwnershipHandoverCall__Outputs {
  _call: RequestOwnershipHandoverCall;

  constructor(call: RequestOwnershipHandoverCall) {
    this._call = call;
  }
}

export class SetFeeRecipientCall extends ethereum.Call {
  get inputs(): SetFeeRecipientCall__Inputs {
    return new SetFeeRecipientCall__Inputs(this);
  }

  get outputs(): SetFeeRecipientCall__Outputs {
    return new SetFeeRecipientCall__Outputs(this);
  }
}

export class SetFeeRecipientCall__Inputs {
  _call: SetFeeRecipientCall;

  constructor(call: SetFeeRecipientCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetFeeRecipientCall__Outputs {
  _call: SetFeeRecipientCall;

  constructor(call: SetFeeRecipientCall) {
    this._call = call;
  }
}

export class SetPlatformFeeCall extends ethereum.Call {
  get inputs(): SetPlatformFeeCall__Inputs {
    return new SetPlatformFeeCall__Inputs(this);
  }

  get outputs(): SetPlatformFeeCall__Outputs {
    return new SetPlatformFeeCall__Outputs(this);
  }
}

export class SetPlatformFeeCall__Inputs {
  _call: SetPlatformFeeCall;

  constructor(call: SetPlatformFeeCall) {
    this._call = call;
  }

  get fee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetPlatformFeeCall__Outputs {
  _call: SetPlatformFeeCall;

  constructor(call: SetPlatformFeeCall) {
    this._call = call;
  }
}

export class SetSwapFeeCall extends ethereum.Call {
  get inputs(): SetSwapFeeCall__Inputs {
    return new SetSwapFeeCall__Inputs(this);
  }

  get outputs(): SetSwapFeeCall__Outputs {
    return new SetSwapFeeCall__Outputs(this);
  }
}

export class SetSwapFeeCall__Inputs {
  _call: SetSwapFeeCall;

  constructor(call: SetSwapFeeCall) {
    this._call = call;
  }

  get fee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetSwapFeeCall__Outputs {
  _call: SetSwapFeeCall;

  constructor(call: SetSwapFeeCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
