// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Buy extends ethereum.Event {
  get params(): Buy__Params {
    return new Buy__Params(this);
  }
}

export class Buy__Params {
  _event: Buy;

  constructor(event: Buy) {
    this._event = event;
  }

  get caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get assets(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get shares(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get swapFee(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Close extends ethereum.Event {
  get params(): Close__Params {
    return new Close__Params(this);
  }
}

export class Close__Params {
  _event: Close;

  constructor(event: Close) {
    this._event = event;
  }

  get assets(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get platformFees(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get swapFeesAsset(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get swapFeesShare(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get param0(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }
}

export class Redeem extends ethereum.Event {
  get params(): Redeem__Params {
    return new Redeem__Params(this);
  }
}

export class Redeem__Params {
  _event: Redeem;

  constructor(event: Redeem) {
    this._event = event;
  }

  get caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get streamID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get shares(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Sell extends ethereum.Event {
  get params(): Sell__Params {
    return new Sell__Params(this);
  }
}

export class Sell__Params {
  _event: Sell;

  constructor(event: Sell) {
    this._event = event;
  }

  get caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get shares(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get assets(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get swapFee(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class LiquidityBootstrapPool__argsResultValue0Struct extends ethereum.Tuple {
  get asset(): Address {
    return this[0].toAddress();
  }

  get share(): Address {
    return this[1].toAddress();
  }

  get assets(): BigInt {
    return this[2].toBigInt();
  }

  get shares(): BigInt {
    return this[3].toBigInt();
  }

  get virtualAssets(): BigInt {
    return this[4].toBigInt();
  }

  get virtualShares(): BigInt {
    return this[5].toBigInt();
  }

  get weightStart(): BigInt {
    return this[6].toBigInt();
  }

  get weightEnd(): BigInt {
    return this[7].toBigInt();
  }

  get saleStart(): BigInt {
    return this[8].toBigInt();
  }

  get saleEnd(): BigInt {
    return this[9].toBigInt();
  }

  get totalPurchased(): BigInt {
    return this[10].toBigInt();
  }

  get maxSharePrice(): BigInt {
    return this[11].toBigInt();
  }
}

export class LiquidityBootstrapPool__reservesAndWeightsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }

  getAssetReserve(): BigInt {
    return this.value0;
  }

  getShareReserve(): BigInt {
    return this.value1;
  }

  getAssetWeight(): BigInt {
    return this.value2;
  }

  getShareWeight(): BigInt {
    return this.value3;
  }
}

export class LiquidityBootstrapPool extends ethereum.SmartContract {
  static bind(address: Address): LiquidityBootstrapPool {
    return new LiquidityBootstrapPool("LiquidityBootstrapPool", address);
  }

  SABLIER(): Address {
    let result = super.call("SABLIER", "SABLIER():(address)", []);

    return result[0].toAddress();
  }

  try_SABLIER(): ethereum.CallResult<Address> {
    let result = super.tryCall("SABLIER", "SABLIER():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  args(): LiquidityBootstrapPool__argsResultValue0Struct {
    let result = super.call(
      "args",
      "args():((address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
      []
    );

    return changetype<LiquidityBootstrapPool__argsResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_args(): ethereum.CallResult<
    LiquidityBootstrapPool__argsResultValue0Struct
  > {
    let result = super.tryCall(
      "args",
      "args():((address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<LiquidityBootstrapPool__argsResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  asset(): Address {
    let result = super.call("asset", "asset():(address)", []);

    return result[0].toAddress();
  }

  try_asset(): ethereum.CallResult<Address> {
    let result = super.tryCall("asset", "asset():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  closed(): boolean {
    let result = super.call("closed", "closed():(bool)", []);

    return result[0].toBoolean();
  }

  try_closed(): ethereum.CallResult<boolean> {
    let result = super.tryCall("closed", "closed():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  manager(): Address {
    let result = super.call("manager", "manager():(address)", []);

    return result[0].toAddress();
  }

  try_manager(): ethereum.CallResult<Address> {
    let result = super.tryCall("manager", "manager():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  maxSharePrice(): BigInt {
    let result = super.call("maxSharePrice", "maxSharePrice():(uint256)", []);

    return result[0].toBigInt();
  }

  try_maxSharePrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxSharePrice",
      "maxSharePrice():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxTotalAssetsIn(): BigInt {
    let result = super.call(
      "maxTotalAssetsIn",
      "maxTotalAssetsIn():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_maxTotalAssetsIn(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxTotalAssetsIn",
      "maxTotalAssetsIn():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxTotalSharesOut(): BigInt {
    let result = super.call(
      "maxTotalSharesOut",
      "maxTotalSharesOut():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_maxTotalSharesOut(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxTotalSharesOut",
      "maxTotalSharesOut():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  platform(): Address {
    let result = super.call("platform", "platform():(address)", []);

    return result[0].toAddress();
  }

  try_platform(): ethereum.CallResult<Address> {
    let result = super.tryCall("platform", "platform():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  platformFee(): BigInt {
    let result = super.call("platformFee", "platformFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_platformFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("platformFee", "platformFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  previewAssetsIn(sharesOut: BigInt): BigInt {
    let result = super.call(
      "previewAssetsIn",
      "previewAssetsIn(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(sharesOut)]
    );

    return result[0].toBigInt();
  }

  try_previewAssetsIn(sharesOut: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "previewAssetsIn",
      "previewAssetsIn(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(sharesOut)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  previewAssetsOut(sharesIn: BigInt): BigInt {
    let result = super.call(
      "previewAssetsOut",
      "previewAssetsOut(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(sharesIn)]
    );

    return result[0].toBigInt();
  }

  try_previewAssetsOut(sharesIn: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "previewAssetsOut",
      "previewAssetsOut(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(sharesIn)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  previewSharesIn(assetsOut: BigInt): BigInt {
    let result = super.call(
      "previewSharesIn",
      "previewSharesIn(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(assetsOut)]
    );

    return result[0].toBigInt();
  }

  try_previewSharesIn(assetsOut: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "previewSharesIn",
      "previewSharesIn(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(assetsOut)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  previewSharesOut(assetsIn: BigInt): BigInt {
    let result = super.call(
      "previewSharesOut",
      "previewSharesOut(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(assetsIn)]
    );

    return result[0].toBigInt();
  }

  try_previewSharesOut(assetsIn: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "previewSharesOut",
      "previewSharesOut(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(assetsIn)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  purchasedShares(param0: Address): BigInt {
    let result = super.call(
      "purchasedShares",
      "purchasedShares(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_purchasedShares(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "purchasedShares",
      "purchasedShares(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  redeem(recipient: Address, referred: boolean): BigInt {
    let result = super.call("redeem", "redeem(address,bool):(uint256)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromBoolean(referred)
    ]);

    return result[0].toBigInt();
  }

  try_redeem(
    recipient: Address,
    referred: boolean
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall("redeem", "redeem(address,bool):(uint256)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromBoolean(referred)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  redeemedShares(param0: Address): BigInt {
    let result = super.call(
      "redeemedShares",
      "redeemedShares(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_redeemedShares(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "redeemedShares",
      "redeemedShares(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  referredAssets(param0: Address): BigInt {
    let result = super.call(
      "referredAssets",
      "referredAssets(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_referredAssets(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "referredAssets",
      "referredAssets(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  referrerFee(): BigInt {
    let result = super.call("referrerFee", "referrerFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_referrerFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("referrerFee", "referrerFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  reservesAndWeights(): LiquidityBootstrapPool__reservesAndWeightsResult {
    let result = super.call(
      "reservesAndWeights",
      "reservesAndWeights():(uint256,uint256,uint256,uint256)",
      []
    );

    return new LiquidityBootstrapPool__reservesAndWeightsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_reservesAndWeights(): ethereum.CallResult<
    LiquidityBootstrapPool__reservesAndWeightsResult
  > {
    let result = super.tryCall(
      "reservesAndWeights",
      "reservesAndWeights():(uint256,uint256,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new LiquidityBootstrapPool__reservesAndWeightsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  saleEnd(): BigInt {
    let result = super.call("saleEnd", "saleEnd():(uint256)", []);

    return result[0].toBigInt();
  }

  try_saleEnd(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("saleEnd", "saleEnd():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  saleStart(): BigInt {
    let result = super.call("saleStart", "saleStart():(uint256)", []);

    return result[0].toBigInt();
  }

  try_saleStart(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("saleStart", "saleStart():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  sellingAllowed(): boolean {
    let result = super.call("sellingAllowed", "sellingAllowed():(bool)", []);

    return result[0].toBoolean();
  }

  try_sellingAllowed(): ethereum.CallResult<boolean> {
    let result = super.tryCall("sellingAllowed", "sellingAllowed():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  share(): Address {
    let result = super.call("share", "share():(address)", []);

    return result[0].toAddress();
  }

  try_share(): ethereum.CallResult<Address> {
    let result = super.tryCall("share", "share():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  swapAssetsForExactShares(
    sharesOut: BigInt,
    maxAssetsIn: BigInt,
    recipient: Address,
    referrer: Address,
    proof: Array<Bytes>
  ): BigInt {
    let result = super.call(
      "swapAssetsForExactShares",
      "swapAssetsForExactShares(uint256,uint256,address,address,bytes32[]):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(sharesOut),
        ethereum.Value.fromUnsignedBigInt(maxAssetsIn),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromAddress(referrer),
        ethereum.Value.fromFixedBytesArray(proof)
      ]
    );

    return result[0].toBigInt();
  }

  try_swapAssetsForExactShares(
    sharesOut: BigInt,
    maxAssetsIn: BigInt,
    recipient: Address,
    referrer: Address,
    proof: Array<Bytes>
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "swapAssetsForExactShares",
      "swapAssetsForExactShares(uint256,uint256,address,address,bytes32[]):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(sharesOut),
        ethereum.Value.fromUnsignedBigInt(maxAssetsIn),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromAddress(referrer),
        ethereum.Value.fromFixedBytesArray(proof)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  swapAssetsForExactShares1(
    sharesOut: BigInt,
    maxAssetsIn: BigInt,
    recipient: Address
  ): BigInt {
    let result = super.call(
      "swapAssetsForExactShares",
      "swapAssetsForExactShares(uint256,uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(sharesOut),
        ethereum.Value.fromUnsignedBigInt(maxAssetsIn),
        ethereum.Value.fromAddress(recipient)
      ]
    );

    return result[0].toBigInt();
  }

  try_swapAssetsForExactShares1(
    sharesOut: BigInt,
    maxAssetsIn: BigInt,
    recipient: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "swapAssetsForExactShares",
      "swapAssetsForExactShares(uint256,uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(sharesOut),
        ethereum.Value.fromUnsignedBigInt(maxAssetsIn),
        ethereum.Value.fromAddress(recipient)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  swapAssetsForExactShares2(
    sharesOut: BigInt,
    maxAssetsIn: BigInt,
    recipient: Address,
    referrer: Address
  ): BigInt {
    let result = super.call(
      "swapAssetsForExactShares",
      "swapAssetsForExactShares(uint256,uint256,address,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(sharesOut),
        ethereum.Value.fromUnsignedBigInt(maxAssetsIn),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromAddress(referrer)
      ]
    );

    return result[0].toBigInt();
  }

  try_swapAssetsForExactShares2(
    sharesOut: BigInt,
    maxAssetsIn: BigInt,
    recipient: Address,
    referrer: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "swapAssetsForExactShares",
      "swapAssetsForExactShares(uint256,uint256,address,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(sharesOut),
        ethereum.Value.fromUnsignedBigInt(maxAssetsIn),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromAddress(referrer)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  swapExactAssetsForShares(
    assetsIn: BigInt,
    minSharesOut: BigInt,
    recipient: Address
  ): BigInt {
    let result = super.call(
      "swapExactAssetsForShares",
      "swapExactAssetsForShares(uint256,uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(assetsIn),
        ethereum.Value.fromUnsignedBigInt(minSharesOut),
        ethereum.Value.fromAddress(recipient)
      ]
    );

    return result[0].toBigInt();
  }

  try_swapExactAssetsForShares(
    assetsIn: BigInt,
    minSharesOut: BigInt,
    recipient: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "swapExactAssetsForShares",
      "swapExactAssetsForShares(uint256,uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(assetsIn),
        ethereum.Value.fromUnsignedBigInt(minSharesOut),
        ethereum.Value.fromAddress(recipient)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  swapExactAssetsForShares1(
    assetsIn: BigInt,
    minSharesOut: BigInt,
    recipient: Address,
    referrer: Address
  ): BigInt {
    let result = super.call(
      "swapExactAssetsForShares",
      "swapExactAssetsForShares(uint256,uint256,address,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(assetsIn),
        ethereum.Value.fromUnsignedBigInt(minSharesOut),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromAddress(referrer)
      ]
    );

    return result[0].toBigInt();
  }

  try_swapExactAssetsForShares1(
    assetsIn: BigInt,
    minSharesOut: BigInt,
    recipient: Address,
    referrer: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "swapExactAssetsForShares",
      "swapExactAssetsForShares(uint256,uint256,address,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(assetsIn),
        ethereum.Value.fromUnsignedBigInt(minSharesOut),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromAddress(referrer)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  swapExactAssetsForShares2(
    assetsIn: BigInt,
    minSharesOut: BigInt,
    recipient: Address,
    referrer: Address,
    proof: Array<Bytes>
  ): BigInt {
    let result = super.call(
      "swapExactAssetsForShares",
      "swapExactAssetsForShares(uint256,uint256,address,address,bytes32[]):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(assetsIn),
        ethereum.Value.fromUnsignedBigInt(minSharesOut),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromAddress(referrer),
        ethereum.Value.fromFixedBytesArray(proof)
      ]
    );

    return result[0].toBigInt();
  }

  try_swapExactAssetsForShares2(
    assetsIn: BigInt,
    minSharesOut: BigInt,
    recipient: Address,
    referrer: Address,
    proof: Array<Bytes>
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "swapExactAssetsForShares",
      "swapExactAssetsForShares(uint256,uint256,address,address,bytes32[]):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(assetsIn),
        ethereum.Value.fromUnsignedBigInt(minSharesOut),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromAddress(referrer),
        ethereum.Value.fromFixedBytesArray(proof)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  swapExactSharesForAssets(
    sharesIn: BigInt,
    minAssetsOut: BigInt,
    recipient: Address
  ): BigInt {
    let result = super.call(
      "swapExactSharesForAssets",
      "swapExactSharesForAssets(uint256,uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(sharesIn),
        ethereum.Value.fromUnsignedBigInt(minAssetsOut),
        ethereum.Value.fromAddress(recipient)
      ]
    );

    return result[0].toBigInt();
  }

  try_swapExactSharesForAssets(
    sharesIn: BigInt,
    minAssetsOut: BigInt,
    recipient: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "swapExactSharesForAssets",
      "swapExactSharesForAssets(uint256,uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(sharesIn),
        ethereum.Value.fromUnsignedBigInt(minAssetsOut),
        ethereum.Value.fromAddress(recipient)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  swapExactSharesForAssets1(
    sharesIn: BigInt,
    minAssetsOut: BigInt,
    recipient: Address,
    proof: Array<Bytes>
  ): BigInt {
    let result = super.call(
      "swapExactSharesForAssets",
      "swapExactSharesForAssets(uint256,uint256,address,bytes32[]):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(sharesIn),
        ethereum.Value.fromUnsignedBigInt(minAssetsOut),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromFixedBytesArray(proof)
      ]
    );

    return result[0].toBigInt();
  }

  try_swapExactSharesForAssets1(
    sharesIn: BigInt,
    minAssetsOut: BigInt,
    recipient: Address,
    proof: Array<Bytes>
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "swapExactSharesForAssets",
      "swapExactSharesForAssets(uint256,uint256,address,bytes32[]):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(sharesIn),
        ethereum.Value.fromUnsignedBigInt(minAssetsOut),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromFixedBytesArray(proof)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  swapFee(): BigInt {
    let result = super.call("swapFee", "swapFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_swapFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("swapFee", "swapFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  swapSharesForExactAssets(
    assetsOut: BigInt,
    maxSharesIn: BigInt,
    recipient: Address
  ): BigInt {
    let result = super.call(
      "swapSharesForExactAssets",
      "swapSharesForExactAssets(uint256,uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(assetsOut),
        ethereum.Value.fromUnsignedBigInt(maxSharesIn),
        ethereum.Value.fromAddress(recipient)
      ]
    );

    return result[0].toBigInt();
  }

  try_swapSharesForExactAssets(
    assetsOut: BigInt,
    maxSharesIn: BigInt,
    recipient: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "swapSharesForExactAssets",
      "swapSharesForExactAssets(uint256,uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(assetsOut),
        ethereum.Value.fromUnsignedBigInt(maxSharesIn),
        ethereum.Value.fromAddress(recipient)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  swapSharesForExactAssets1(
    assetsOut: BigInt,
    maxSharesIn: BigInt,
    recipient: Address,
    proof: Array<Bytes>
  ): BigInt {
    let result = super.call(
      "swapSharesForExactAssets",
      "swapSharesForExactAssets(uint256,uint256,address,bytes32[]):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(assetsOut),
        ethereum.Value.fromUnsignedBigInt(maxSharesIn),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromFixedBytesArray(proof)
      ]
    );

    return result[0].toBigInt();
  }

  try_swapSharesForExactAssets1(
    assetsOut: BigInt,
    maxSharesIn: BigInt,
    recipient: Address,
    proof: Array<Bytes>
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "swapSharesForExactAssets",
      "swapSharesForExactAssets(uint256,uint256,address,bytes32[]):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(assetsOut),
        ethereum.Value.fromUnsignedBigInt(maxSharesIn),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromFixedBytesArray(proof)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalPurchased(): BigInt {
    let result = super.call("totalPurchased", "totalPurchased():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalPurchased(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalPurchased",
      "totalPurchased():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalReferred(): BigInt {
    let result = super.call("totalReferred", "totalReferred():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalReferred(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalReferred",
      "totalReferred():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSwapFeesAsset(): BigInt {
    let result = super.call(
      "totalSwapFeesAsset",
      "totalSwapFeesAsset():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalSwapFeesAsset(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalSwapFeesAsset",
      "totalSwapFeesAsset():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSwapFeesShare(): BigInt {
    let result = super.call(
      "totalSwapFeesShare",
      "totalSwapFeesShare():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalSwapFeesShare(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalSwapFeesShare",
      "totalSwapFeesShare():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  vestCliff(): BigInt {
    let result = super.call("vestCliff", "vestCliff():(uint40)", []);

    return result[0].toBigInt();
  }

  try_vestCliff(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("vestCliff", "vestCliff():(uint40)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  vestEnd(): BigInt {
    let result = super.call("vestEnd", "vestEnd():(uint40)", []);

    return result[0].toBigInt();
  }

  try_vestEnd(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("vestEnd", "vestEnd():(uint40)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  vestShares(): boolean {
    let result = super.call("vestShares", "vestShares():(bool)", []);

    return result[0].toBoolean();
  }

  try_vestShares(): ethereum.CallResult<boolean> {
    let result = super.tryCall("vestShares", "vestShares():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  virtualAssets(): BigInt {
    let result = super.call("virtualAssets", "virtualAssets():(uint256)", []);

    return result[0].toBigInt();
  }

  try_virtualAssets(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "virtualAssets",
      "virtualAssets():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  virtualShares(): BigInt {
    let result = super.call("virtualShares", "virtualShares():(uint256)", []);

    return result[0].toBigInt();
  }

  try_virtualShares(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "virtualShares",
      "virtualShares():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  weightEnd(): BigInt {
    let result = super.call("weightEnd", "weightEnd():(uint256)", []);

    return result[0].toBigInt();
  }

  try_weightEnd(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("weightEnd", "weightEnd():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  weightStart(): BigInt {
    let result = super.call("weightStart", "weightStart():(uint256)", []);

    return result[0].toBigInt();
  }

  try_weightStart(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("weightStart", "weightStart():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  whitelistMerkleRoot(): Bytes {
    let result = super.call(
      "whitelistMerkleRoot",
      "whitelistMerkleRoot():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_whitelistMerkleRoot(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "whitelistMerkleRoot",
      "whitelistMerkleRoot():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  whitelisted(): boolean {
    let result = super.call("whitelisted", "whitelisted():(bool)", []);

    return result[0].toBoolean();
  }

  try_whitelisted(): ethereum.CallResult<boolean> {
    let result = super.tryCall("whitelisted", "whitelisted():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _sablier(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CloseCall extends ethereum.Call {
  get inputs(): CloseCall__Inputs {
    return new CloseCall__Inputs(this);
  }

  get outputs(): CloseCall__Outputs {
    return new CloseCall__Outputs(this);
  }
}

export class CloseCall__Inputs {
  _call: CloseCall;

  constructor(call: CloseCall) {
    this._call = call;
  }
}

export class CloseCall__Outputs {
  _call: CloseCall;

  constructor(call: CloseCall) {
    this._call = call;
  }
}

export class RedeemCall extends ethereum.Call {
  get inputs(): RedeemCall__Inputs {
    return new RedeemCall__Inputs(this);
  }

  get outputs(): RedeemCall__Outputs {
    return new RedeemCall__Outputs(this);
  }
}

export class RedeemCall__Inputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get referred(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class RedeemCall__Outputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }

  get shares(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SwapAssetsForExactSharesCall extends ethereum.Call {
  get inputs(): SwapAssetsForExactSharesCall__Inputs {
    return new SwapAssetsForExactSharesCall__Inputs(this);
  }

  get outputs(): SwapAssetsForExactSharesCall__Outputs {
    return new SwapAssetsForExactSharesCall__Outputs(this);
  }
}

export class SwapAssetsForExactSharesCall__Inputs {
  _call: SwapAssetsForExactSharesCall;

  constructor(call: SwapAssetsForExactSharesCall) {
    this._call = call;
  }

  get sharesOut(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get maxAssetsIn(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get recipient(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get referrer(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get proof(): Array<Bytes> {
    return this._call.inputValues[4].value.toBytesArray();
  }
}

export class SwapAssetsForExactSharesCall__Outputs {
  _call: SwapAssetsForExactSharesCall;

  constructor(call: SwapAssetsForExactSharesCall) {
    this._call = call;
  }

  get assetsIn(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SwapAssetsForExactShares1Call extends ethereum.Call {
  get inputs(): SwapAssetsForExactShares1Call__Inputs {
    return new SwapAssetsForExactShares1Call__Inputs(this);
  }

  get outputs(): SwapAssetsForExactShares1Call__Outputs {
    return new SwapAssetsForExactShares1Call__Outputs(this);
  }
}

export class SwapAssetsForExactShares1Call__Inputs {
  _call: SwapAssetsForExactShares1Call;

  constructor(call: SwapAssetsForExactShares1Call) {
    this._call = call;
  }

  get sharesOut(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get maxAssetsIn(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get recipient(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class SwapAssetsForExactShares1Call__Outputs {
  _call: SwapAssetsForExactShares1Call;

  constructor(call: SwapAssetsForExactShares1Call) {
    this._call = call;
  }

  get assetsIn(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SwapAssetsForExactShares2Call extends ethereum.Call {
  get inputs(): SwapAssetsForExactShares2Call__Inputs {
    return new SwapAssetsForExactShares2Call__Inputs(this);
  }

  get outputs(): SwapAssetsForExactShares2Call__Outputs {
    return new SwapAssetsForExactShares2Call__Outputs(this);
  }
}

export class SwapAssetsForExactShares2Call__Inputs {
  _call: SwapAssetsForExactShares2Call;

  constructor(call: SwapAssetsForExactShares2Call) {
    this._call = call;
  }

  get sharesOut(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get maxAssetsIn(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get recipient(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get referrer(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class SwapAssetsForExactShares2Call__Outputs {
  _call: SwapAssetsForExactShares2Call;

  constructor(call: SwapAssetsForExactShares2Call) {
    this._call = call;
  }

  get assetsIn(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SwapExactAssetsForSharesCall extends ethereum.Call {
  get inputs(): SwapExactAssetsForSharesCall__Inputs {
    return new SwapExactAssetsForSharesCall__Inputs(this);
  }

  get outputs(): SwapExactAssetsForSharesCall__Outputs {
    return new SwapExactAssetsForSharesCall__Outputs(this);
  }
}

export class SwapExactAssetsForSharesCall__Inputs {
  _call: SwapExactAssetsForSharesCall;

  constructor(call: SwapExactAssetsForSharesCall) {
    this._call = call;
  }

  get assetsIn(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get minSharesOut(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get recipient(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class SwapExactAssetsForSharesCall__Outputs {
  _call: SwapExactAssetsForSharesCall;

  constructor(call: SwapExactAssetsForSharesCall) {
    this._call = call;
  }

  get sharesOut(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SwapExactAssetsForShares1Call extends ethereum.Call {
  get inputs(): SwapExactAssetsForShares1Call__Inputs {
    return new SwapExactAssetsForShares1Call__Inputs(this);
  }

  get outputs(): SwapExactAssetsForShares1Call__Outputs {
    return new SwapExactAssetsForShares1Call__Outputs(this);
  }
}

export class SwapExactAssetsForShares1Call__Inputs {
  _call: SwapExactAssetsForShares1Call;

  constructor(call: SwapExactAssetsForShares1Call) {
    this._call = call;
  }

  get assetsIn(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get minSharesOut(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get recipient(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get referrer(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class SwapExactAssetsForShares1Call__Outputs {
  _call: SwapExactAssetsForShares1Call;

  constructor(call: SwapExactAssetsForShares1Call) {
    this._call = call;
  }

  get sharesOut(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SwapExactAssetsForShares2Call extends ethereum.Call {
  get inputs(): SwapExactAssetsForShares2Call__Inputs {
    return new SwapExactAssetsForShares2Call__Inputs(this);
  }

  get outputs(): SwapExactAssetsForShares2Call__Outputs {
    return new SwapExactAssetsForShares2Call__Outputs(this);
  }
}

export class SwapExactAssetsForShares2Call__Inputs {
  _call: SwapExactAssetsForShares2Call;

  constructor(call: SwapExactAssetsForShares2Call) {
    this._call = call;
  }

  get assetsIn(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get minSharesOut(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get recipient(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get referrer(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get proof(): Array<Bytes> {
    return this._call.inputValues[4].value.toBytesArray();
  }
}

export class SwapExactAssetsForShares2Call__Outputs {
  _call: SwapExactAssetsForShares2Call;

  constructor(call: SwapExactAssetsForShares2Call) {
    this._call = call;
  }

  get sharesOut(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SwapExactSharesForAssetsCall extends ethereum.Call {
  get inputs(): SwapExactSharesForAssetsCall__Inputs {
    return new SwapExactSharesForAssetsCall__Inputs(this);
  }

  get outputs(): SwapExactSharesForAssetsCall__Outputs {
    return new SwapExactSharesForAssetsCall__Outputs(this);
  }
}

export class SwapExactSharesForAssetsCall__Inputs {
  _call: SwapExactSharesForAssetsCall;

  constructor(call: SwapExactSharesForAssetsCall) {
    this._call = call;
  }

  get sharesIn(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get minAssetsOut(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get recipient(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class SwapExactSharesForAssetsCall__Outputs {
  _call: SwapExactSharesForAssetsCall;

  constructor(call: SwapExactSharesForAssetsCall) {
    this._call = call;
  }

  get assetsOut(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SwapExactSharesForAssets1Call extends ethereum.Call {
  get inputs(): SwapExactSharesForAssets1Call__Inputs {
    return new SwapExactSharesForAssets1Call__Inputs(this);
  }

  get outputs(): SwapExactSharesForAssets1Call__Outputs {
    return new SwapExactSharesForAssets1Call__Outputs(this);
  }
}

export class SwapExactSharesForAssets1Call__Inputs {
  _call: SwapExactSharesForAssets1Call;

  constructor(call: SwapExactSharesForAssets1Call) {
    this._call = call;
  }

  get sharesIn(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get minAssetsOut(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get recipient(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get proof(): Array<Bytes> {
    return this._call.inputValues[3].value.toBytesArray();
  }
}

export class SwapExactSharesForAssets1Call__Outputs {
  _call: SwapExactSharesForAssets1Call;

  constructor(call: SwapExactSharesForAssets1Call) {
    this._call = call;
  }

  get assetsOut(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SwapSharesForExactAssetsCall extends ethereum.Call {
  get inputs(): SwapSharesForExactAssetsCall__Inputs {
    return new SwapSharesForExactAssetsCall__Inputs(this);
  }

  get outputs(): SwapSharesForExactAssetsCall__Outputs {
    return new SwapSharesForExactAssetsCall__Outputs(this);
  }
}

export class SwapSharesForExactAssetsCall__Inputs {
  _call: SwapSharesForExactAssetsCall;

  constructor(call: SwapSharesForExactAssetsCall) {
    this._call = call;
  }

  get assetsOut(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get maxSharesIn(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get recipient(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class SwapSharesForExactAssetsCall__Outputs {
  _call: SwapSharesForExactAssetsCall;

  constructor(call: SwapSharesForExactAssetsCall) {
    this._call = call;
  }

  get sharesIn(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SwapSharesForExactAssets1Call extends ethereum.Call {
  get inputs(): SwapSharesForExactAssets1Call__Inputs {
    return new SwapSharesForExactAssets1Call__Inputs(this);
  }

  get outputs(): SwapSharesForExactAssets1Call__Outputs {
    return new SwapSharesForExactAssets1Call__Outputs(this);
  }
}

export class SwapSharesForExactAssets1Call__Inputs {
  _call: SwapSharesForExactAssets1Call;

  constructor(call: SwapSharesForExactAssets1Call) {
    this._call = call;
  }

  get assetsOut(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get maxSharesIn(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get recipient(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get proof(): Array<Bytes> {
    return this._call.inputValues[3].value.toBytesArray();
  }
}

export class SwapSharesForExactAssets1Call__Outputs {
  _call: SwapSharesForExactAssets1Call;

  constructor(call: SwapSharesForExactAssets1Call) {
    this._call = call;
  }

  get sharesIn(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class TogglePauseCall extends ethereum.Call {
  get inputs(): TogglePauseCall__Inputs {
    return new TogglePauseCall__Inputs(this);
  }

  get outputs(): TogglePauseCall__Outputs {
    return new TogglePauseCall__Outputs(this);
  }
}

export class TogglePauseCall__Inputs {
  _call: TogglePauseCall;

  constructor(call: TogglePauseCall) {
    this._call = call;
  }
}

export class TogglePauseCall__Outputs {
  _call: TogglePauseCall;

  constructor(call: TogglePauseCall) {
    this._call = call;
  }
}
