type Factory @entity {
  # factory address
  id: ID!
  # amount of pools created
  poolCount: BigInt!
  # amoutn of transactions all time
  txCount: BigInt!
  # total volume all time in derived USD
  totalVolumeUSD: BigDecimal!
  # total volume all time in derived Matic
  totalVolumeMatic: BigDecimal!
  # total swap fees all time in USD
  totalFeesUSD: BigDecimal!
  # total swap fees all time in USD
  totalFeesMatic: BigDecimal!
  # all volume even through less reliable USD values
  untrackedVolumeUSD: BigDecimal!
  # TVL derived in USD
  totalValueLockedUSD: BigDecimal!
  #
  defaultCommunityFee: BigInt!
  # TVL derived in Matic
  totalValueLockedMatic: BigDecimal!
  # TVL derived in USD untracked
  totalValueLockedUSDUntracked: BigDecimal!
  # TVL derived in Matic untracked
  totalValueLockedMaticUntracked: BigDecimal!
  # current owner of the factory
  owner: ID!
  # total Account count
  accountCount: BigInt!
}

type Account @entity {
  # account address
  id: ID!
  # holding tokens
  memeTokenHoldingCount: BigInt!
  holder: [HoldingToken!]! @derivedFrom(field: "account")

  # Pot2Pump
  pot2PumpLaunchCount: BigInt!
  participateCount: BigInt!
  participant: [Participant!]! @derivedFrom(field: "account")

  # transactions
  transaction: [Transaction!]! @derivedFrom(field: "account")
  platformTxCount: BigInt!
  swapCount: BigInt!
  holdingPoolCount: BigInt!

  # dex total profit
  totalSpendUSD: BigDecimal!

  # earning (calculate all pot2pump, holding token, pool) derived in USD
  totalEarningUSDDay: BigDecimal!
  totalEarningPercentageDay: BigDecimal!
  totalEarningUSDWeek: BigDecimal!
  totalEarningPercentageWeek: BigDecimal!
  totalEarningUSDMonth: BigDecimal!
  totalEarningPercentageMonth: BigDecimal!
  totalEarningUSDYear: BigDecimal!
  totalEarningPercentageYear: BigDecimal!

  # balance (calculate all pot2pump, holding token, pool) derived in USD
  accountBalanceUSD: BigDecimal!
  accountBalanceUSDDay: BigDecimal!
  accountBalanceUSDWeek: BigDecimal!
  accountBalanceUSDMonth: BigDecimal!
  accountBalanceUSDYear: BigDecimal!

  # aquabera
  vaultShares: [VaultShare!] @derivedFrom(field: "user")
}
type HoldingToken @entity {
  # account address + token address
  id: ID!
  # token address
  token: Token!
  account: Account!
  holdingValue: BigInt!
}

# stores for USD calculations
type Bundle @entity {
  id: ID!
  # price of Matic in usd
  maticPriceUSD: BigDecimal!
}

type Token @entity {
  # token address
  id: ID!
  # token symbol
  symbol: String!
  # token name
  name: String!
  # token decimals
  decimals: BigInt!
  # token total supply
  totalSupply: BigInt!
  # volume in token units
  volume: BigDecimal!
  # volume in derived USD
  volumeUSD: BigDecimal!
  # volume in USD even on pools with less reliable USD values
  untrackedVolumeUSD: BigDecimal!
  # fees in USD
  feesUSD: BigDecimal!
  # transactions across all pools that include this token
  txCount: BigInt!
  # number of pools containing this token
  poolCount: BigInt!
  # liquidity across all pools in token units
  totalValueLocked: BigDecimal!
  # liquidity across all pools in derived USD
  totalValueLockedUSD: BigDecimal!
  # TVL derived in USD untracked
  totalValueLockedUSDUntracked: BigDecimal!
  # derived price in Matic
  derivedMatic: BigDecimal!
  # derived price in USD
  derivedUSD: BigDecimal!
  # initial price in USD
  initialUSD: BigDecimal!
  # pools token is in that are white listed for USD pricing
  whitelistPools: [Pool!]!
  # derived fields
  tokenDayData: [TokenDayData!]! @derivedFrom(field: "token")
  # derived market cap by total supply and derived price
  marketCap: BigDecimal!

  # Pot2Pump
  pot2Pump: Pot2Pump @derivedFrom(field: "launchToken")

  # holders
  holderCount: BigInt!
  holders: [HoldingToken!]! @derivedFrom(field: "token")
}

type Pot2Pump @entity {
  # token address
  id: ID!
  # launch token
  launchTokenInitialPrice: BigDecimal!
  launchToken: Token!
  DepositLaunchToken: BigInt!
  LaunchTokenTVLUSD: BigDecimal!
  LaunchTokenMCAPUSD: BigDecimal!
  # raised token
  raisedTokenMinCap: BigInt!
  raisedToken: Token!
  raisedTokenReachingMinCap: Boolean!
  DepositRaisedToken: BigInt!

  # creator
  creator: String!

  # participants
  participantsCount: BigInt!
  participants: [Participant!]! @derivedFrom(field: "pot2Pump")

  # general info
  # total refund amount of pair
  totalRefundAmount: BigInt!
  # total claimLP amount of pair
  totalClaimLpAmount: BigInt!
  createdAt: BigInt!
  endTime: BigInt!
  state: BigInt!

  # transactions
  participantTransactionHistorys: [ParticipantTransactionHistory!]! @derivedFrom(field: "pot2Pump")

  # Search string combining address and token symbols
  searchString: String!
}

type Participant @entity {
  id: ID!
  pot2Pump: Pot2Pump!
  account: Account!
  # total deposit amount
  amount: BigInt!
  # total refund amount
  totalRefundAmount: BigInt!
  # total claim LP amount , 1 mean claim all, 0 mean no claim
  totalclaimLqAmount: BigInt!

  canClaim: Boolean!

  createdAt: BigInt!

  participantTransactionHistorys: [ParticipantTransactionHistory!]! @derivedFrom(field: "participant")
}

type ParticipantTransactionHistory @entity {
  id: ID!
  # participant Account
  account: Account!
  # pot2Pump
  pot2Pump: Pot2Pump!
  # deposit amount
  depositAmount: BigInt!
  # refund amount
  refundAmount: BigInt!
  # claim LP amount, 1 mean claim all, 0 mean no claim
  claimLqAmount: BigInt!
  actionType: TransactionType!
  createdAt: BigInt!

  participant: Participant!
}

type Pool @entity {
  # pool address
  id: ID!
  # creation
  createdAtTimestamp: BigInt!
  # block pool was created at
  createdAtBlockNumber: BigInt!
  # token0
  token0: Token!
  # token1
  token1: Token!
  deployer: Bytes!
  plugin: Bytes!
  pluginConfig: Int!
  # fee amount
  fee: BigInt!
  communityFee: BigInt!
  # in range liquidity
  liquidity: BigInt!
  # current price tracker
  sqrtPrice: BigInt!
  # tracker for global fee growth
  feeGrowthGlobal0X128: BigInt!
  # tracker for global fee growth
  feeGrowthGlobal1X128: BigInt!
  # token0 per token1
  token0Price: BigDecimal!
  # token1 per token0
  token1Price: BigDecimal!
  # current tick
  tick: BigInt!
  # current observation index
  observationIndex: BigInt!
  # all time token0 swapped
  volumeToken0: BigDecimal!
  # all time token1 swapped
  volumeToken1: BigDecimal!
  # all time USD swapped
  volumeUSD: BigDecimal!
  # all time USD swapped, unfiltered for unreliable USD pools
  untrackedVolumeUSD: BigDecimal!
  # fees in USD
  feesUSD: BigDecimal!
  # tick spacing
  tickSpacing: BigInt!
  #
  untrackedFeesUSD: BigDecimal!
  # all time number of transactions
  txCount: BigInt!
  # all time fees collected token0
  collectedFeesToken0: BigDecimal!
  # all time fees collected token1
  collectedFeesToken1: BigDecimal!
  # all time fees collected derived USD
  collectedFeesUSD: BigDecimal!
  # total token 0 across all ticks
  totalValueLockedToken0: BigDecimal!
  # total token 1 across all ticks
  totalValueLockedToken1: BigDecimal!
  feesToken0: BigDecimal!
  feesToken1: BigDecimal!
  # tvl derived Matic
  totalValueLockedMatic: BigDecimal!
  # tvl USD
  totalValueLockedUSD: BigDecimal!
  # TVL derived in USD untracked
  totalValueLockedUSDUntracked: BigDecimal!
  # Fields used to help derived relationship
  liquidityProviderCount: BigInt! # used to detect new exchanges
  # hourly snapshots of pool data
  poolHourData: [PoolHourData!]! @derivedFrom(field: "pool")
  # daily snapshots of pool data
  poolDayData: [PoolDayData!]! @derivedFrom(field: "pool")
  # weekly snapshots of pool data
  poolWeekData: [PoolWeekData!]! @derivedFrom(field: "pool")
  # monthly snapshots of pool data
  poolMonthData: [PoolMonthData!]! @derivedFrom(field: "pool")
  # derived fields
  mints: [Mint!]! @derivedFrom(field: "pool")
  burns: [Burn!]! @derivedFrom(field: "pool")
  swaps: [Swap!]! @derivedFrom(field: "pool")
  collects: [Collect!]! @derivedFrom(field: "pool")
  ticks: [Tick!]! @derivedFrom(field: "pool")

  # vaults
  vaults: IchiVault @derivedFrom(field: "pool")

  # Search string combining address and token symbols
  searchString: String!

  # APR calculations
  aprPercentage: BigDecimal!
  # Historical APR data points
  aprDayData: [PoolDayData!]! @derivedFrom(field: "pool")
  aprWeekData: [PoolWeekData!]! @derivedFrom(field: "pool")
  aprMonthData: [PoolMonthData!]! @derivedFrom(field: "pool")
}

type Tick @entity {
  # format: <pool address>#<tick index>
  id: ID!
  # pool address
  poolAddress: String
  # tick index
  tickIdx: BigInt!
  # pointer to pool
  pool: Pool!
  # total liquidity pool has as tick lower or upper
  liquidityGross: BigInt!
  # how much liquidity changes when tick crossed
  liquidityNet: BigInt!
  # calculated price of token0 of tick within this pool - constant
  price0: BigDecimal!
  # calculated price of token1 of tick within this pool - constant
  price1: BigDecimal!
  # lifetime volume of token0 with this tick in range
  volumeToken0: BigDecimal!
  # lifetime volume of token1 with this tick in range
  volumeToken1: BigDecimal!
  # lifetime volume in derived USD with this tick in range
  volumeUSD: BigDecimal!
  # lifetime volume in untracked USD with this tick in range
  untrackedVolumeUSD: BigDecimal!
  # fees in USD
  feesUSD: BigDecimal!
  # all time collected fees in token0
  collectedFeesToken0: BigDecimal!
  # all time collected fees in token1
  collectedFeesToken1: BigDecimal!
  # all time collected fees in USD
  collectedFeesUSD: BigDecimal!
  # created time
  createdAtTimestamp: BigInt!
  # created block
  createdAtBlockNumber: BigInt!
  # Fields used to help derived relationship
  liquidityProviderCount: BigInt! # used to detect new exchanges
  # derived fields
  # swaps: [Swap!]! @derivedFrom(field: "tick")
  # vars needed for fee computation
  feeGrowthOutside0X128: BigInt!
  feeGrowthOutside1X128: BigInt!
}

type PoolPosition @entity {
  id: ID!
  pool: Pool!
  lowerTick: Tick!
  upperTick: Tick!
  owner: Bytes!
  liquidity: BigInt!
}

type Position @entity {
  # Positions created through NonfungiblePositionManager
  # NFT token id
  id: ID!
  # owner of the NFT
  owner: Bytes!
  # pool position is within
  pool: Pool!
  # allow indexing by tokens
  token0: Token!
  # allow indexing by tokens
  token1: Token!
  # lower tick of the position
  tickLower: Tick!
  # upper tick of the position
  tickUpper: Tick!
  # total position liquidity
  liquidity: BigInt!
  # amount of token 0 ever deposited to position
  depositedToken0: BigDecimal!
  # amount of token 1 ever deposited to position
  depositedToken1: BigDecimal!
  # amount of token 0 ever withdrawn from position (without fees)
  withdrawnToken0: BigDecimal!
  # amount of token 1 ever withdrawn from position (without fees)
  withdrawnToken1: BigDecimal!
  # all time collected token0 (withdrawnToken0 + collectedFeesToken0)
  collectedToken0: BigDecimal!
  # all time collected token1 (withdrawnToken1 + collectedFeesToken1)
  collectedToken1: BigDecimal!
  # all time collected fees in token0
  collectedFeesToken0: BigDecimal!
  # all time collected fees in token1
  collectedFeesToken1: BigDecimal!
  # tx in which the position was initialized
  transaction: Transaction!
  # vars needed for fee computation
  feeGrowthInside0LastX128: BigInt!
  feeGrowthInside1LastX128: BigInt!

  token0Tvl: BigDecimal
  token1Tvl: BigDecimal
}

type PositionSnapshot @entity {
  # <NFT token id>#<block number>
  id: ID!
  # owner of the NFT
  owner: Bytes!
  # pool the position is within
  pool: Pool!
  # position of which the snap was taken of
  position: Position!
  # block in which the snap was created
  blockNumber: BigInt!
  # timestamp of block in which the snap was created
  timestamp: BigInt!
  # total position liquidity
  liquidity: BigInt!
  # amount of token 0 ever deposited to position
  depositedToken0: BigDecimal!
  # amount of token 1 ever deposited to position
  depositedToken1: BigDecimal!
  # amount of token 0 ever withdrawn from position (without fees)
  withdrawnToken0: BigDecimal!
  # amount of token 1 ever withdrawn from position (without fees)
  withdrawnToken1: BigDecimal!
  # all time collected fees in token0
  collectedFeesToken0: BigDecimal!
  # all time collected fees in token1
  collectedFeesToken1: BigDecimal!
  # tx in which the snapshot was initialized
  transaction: Transaction!
  # internal vars needed for fee computation
  feeGrowthInside0LastX128: BigInt!
  feeGrowthInside1LastX128: BigInt!
}

type Transaction @entity {
  # txn hash
  id: ID!
  # type
  type: TransactionType!
  # account
  account: Account!
  # block txn was included in
  blockNumber: BigInt!
  # timestamp txn was confirmed
  timestamp: BigInt!
  # gas used during txn execution
  gasLimit: BigInt!
  gasPrice: BigInt!
  # derived values
  mints: [Mint!]! @derivedFrom(field: "transaction")
  burns: [Burn!]! @derivedFrom(field: "transaction")
  swaps: [Swap!]! @derivedFrom(field: "transaction")
  flashed: [Flash!]! @derivedFrom(field: "transaction")
  collects: [Collect!]! @derivedFrom(field: "transaction")
  depositRaisedTokens: [DepositRaisedToken!]! @derivedFrom(field: "transaction")
  refunds: [Refund!]! @derivedFrom(field: "transaction")
  claimLps: [ClaimLp!]! @derivedFrom(field: "transaction")
}

enum TransactionType {
  DEPOSIT
  REFUND
  CLAIM_LP
  SWAP
  COLLECT
  MINT
  BURN
  INCREASE_LIQUIDITY
  DECREASE_LIQUIDITY
}

type Mint @entity {
  # transaction hash + "#" + index in mints Transaction array
  id: ID!
  # which txn the mint was included in
  transaction: Transaction!
  # time of txn
  timestamp: BigInt!
  # pool position is within
  pool: Pool!
  # allow indexing by tokens
  token0: Token!
  # allow indexing by tokens
  token1: Token!
  # owner of position where liquidity minted to
  owner: Bytes!
  # the address that minted the liquidity
  sender: Bytes
  # txn origin
  origin: Bytes! # the EOA that initiated the txn
  # amount of liquidity minted
  amount: BigInt!
  # amount of token 0 minted
  amount0: BigDecimal!
  # amount of token 1 minted
  amount1: BigDecimal!
  # derived amount based on available prices of tokens
  amountUSD: BigDecimal
  # lower tick of the position
  tickLower: BigInt!
  # upper tick of the position
  tickUpper: BigInt!
  # order within the txn
  logIndex: BigInt
}

type Burn @entity {
  # transaction hash + "#" + index in mints Transaction array
  id: ID!
  # txn burn was included in
  transaction: Transaction!
  # pool position is within
  pool: Pool!
  # allow indexing by tokens
  token0: Token!
  # allow indexing by tokens
  token1: Token!
  # need this to pull recent txns for specific token or pool
  timestamp: BigInt!
  # owner of position where liquidity was burned
  owner: Bytes
  # txn origin
  origin: Bytes! # the EOA that initiated the txn
  # amouny of liquidity burned
  amount: BigInt!
  # amount of token 0 burned
  amount0: BigDecimal!
  # amount of token 1 burned
  amount1: BigDecimal!
  # derived amount based on available prices of tokens
  amountUSD: BigDecimal
  # lower tick of position
  tickLower: BigInt!
  # upper tick of position
  tickUpper: BigInt!
  # position within the transactions
  logIndex: BigInt
}

type Swap @entity {
  # transaction hash + "#" + index in swaps Transaction array
  id: ID!
  # pointer to transaction
  transaction: Transaction!
  # timestamp of transaction
  timestamp: BigInt!
  # pool swap occured within
  pool: Pool!
  # allow indexing by tokens
  token0: Token!
  # allow indexing by tokens
  token1: Token!
  # sender of the swap
  sender: Bytes!
  # recipient of the swap
  recipient: Bytes!
  # liquidity after swap
  liquidity: BigInt!
  # txn origin
  origin: Bytes! # the EOA that initiated the txn
  # delta of token0 swapped
  amount0: BigDecimal!
  # delta of token1 swapped
  amount1: BigDecimal!
  # derived info
  amountUSD: BigDecimal!
  # The sqrt(price) of the pool after the swap, as a Q64.96
  price: BigInt!
  # the tick after the swap
  tick: BigInt!
  # index within the txn
  logIndex: BigInt
}

type Collect @entity {
  # transaction hash + "#" + index in collect Transaction array
  id: ID!
  # pointer to txn
  transaction: Transaction!
  # timestamp of event
  timestamp: BigInt!
  # pool collect occured within
  pool: Pool!
  # owner of position collect was performed on
  owner: Bytes
  # amount of token0 collected
  amount0: BigDecimal!
  # amount of token1 collected
  amount1: BigDecimal!
  # derived amount based on available prices of tokens
  amountUSD: BigDecimal
  # lower tick of position
  tickLower: BigInt!
  # uppper tick of position
  tickUpper: BigInt!
  # index within the txn
  logIndex: BigInt
}

type Flash @entity {
  # transaction hash + "-" + index in collect Transaction array
  id: ID!
  # pointer to txn
  transaction: Transaction!
  # timestamp of event
  timestamp: BigInt!
  # pool collect occured within
  pool: Pool!
  # sender of the flash
  sender: Bytes!
  # recipient of the flash
  recipient: Bytes!
  # amount of token0 flashed
  amount0: BigDecimal!
  # amount of token1 flashed
  amount1: BigDecimal!
  # derived amount based on available prices of tokens
  amountUSD: BigDecimal!
  # amount token0 paid for flash
  amount0Paid: BigDecimal!
  # amount token1 paid for flash
  amount1Paid: BigDecimal!
  # index within the txn
  logIndex: BigInt
}

# Data accumulated and condensed into day stats for all of Algebra
type AlgebraDayData @entity {
  # timestamp rounded to current day by dividing by 86400
  id: ID!
  # timestamp rounded to current day by dividing by 86400
  date: Int!
  # total daily volume in Algebra derived in terms of Matic
  volumeMatic: BigDecimal!
  # total daily volume in Algebra derived in terms of USD
  volumeUSD: BigDecimal!
  # total daily volume in Algebra derived in terms of USD untracked
  volumeUSDUntracked: BigDecimal!
  # fees in USD
  feesUSD: BigDecimal!
  # number of daily transactions
  txCount: BigInt!
  # tvl in terms of USD
  tvlUSD: BigDecimal!
}

# Data accumulated and condensed into day stats for each pool
type PoolDayData @entity {
  # timestamp rounded to current day by dividing by 86400
  id: ID!
  # timestamp rounded to current day by dividing by 86400
  date: Int!
  # pointer to pool
  pool: Pool!
  # in range liquidity at end of period
  liquidity: BigInt!
  # current price tracker at end of period
  sqrtPrice: BigInt!
  #
  untrackedVolumeUSD: BigDecimal!
  # price of token0 - derived from sqrtPrice
  token0Price: BigDecimal!
  # price of token1 - derived from sqrtPrice
  token1Price: BigDecimal!
  # current tick at end of period
  tick: BigInt
  # tracker for global fee growth
  feeGrowthGlobal0X128: BigInt!
  # tracker for global fee growth
  feeGrowthGlobal1X128: BigInt!
  # tvl derived in USD at end of period
  tvlUSD: BigDecimal!
  feesToken0: BigDecimal!
  feesToken1: BigDecimal!
  # volume in token0
  volumeToken0: BigDecimal!
  # volume in token1
  volumeToken1: BigDecimal!
  # volume in USD
  volumeUSD: BigDecimal!
  # fees in USD
  feesUSD: BigDecimal!
  # numebr of transactions during period
  txCount: BigInt!
  # opening price of token0
  open: BigDecimal!
  # high price of token0
  high: BigDecimal!
  # low price of token0
  low: BigDecimal!
  # close price of token0
  close: BigDecimal!
  # APR calculations
  aprPercentage: BigDecimal!
  dailyFeeUSD: BigDecimal!
}

type PoolFeeData @entity {
  id: ID!

  pool: String

  timestamp: BigInt!

  fee: BigInt!
}

# hourly stats tracker for pool
type PoolHourData @entity {
  # format: <pool address>-<timestamp>
  id: ID!
  # unix timestamp for start of hour
  periodStartUnix: Int!
  # pointer to pool
  pool: Pool!
  # in range liquidity at end of period
  liquidity: BigInt!
  # current price tracker at end of period
  sqrtPrice: BigInt!
  # price of token0 - derived from sqrtPrice
  token0Price: BigDecimal!
  # price of token1 - derived from sqrtPrice
  token1Price: BigDecimal!
  # current tick at end of period
  tick: BigInt
  # tracker for global fee growth
  feeGrowthGlobal0X128: BigInt!
  # tracker for global fee growth
  feeGrowthGlobal1X128: BigInt!
  # tvl derived in USD at end of period
  tvlUSD: BigDecimal!
  # volume in token0
  volumeToken0: BigDecimal!
  # volume in token1
  volumeToken1: BigDecimal!
  # volume in USD
  volumeUSD: BigDecimal!
  # fees in USD
  feesUSD: BigDecimal!
  # numebr of transactions during period
  untrackedVolumeUSD: BigDecimal!
  txCount: BigInt!
  # opening price of token0
  open: BigDecimal!
  # high price of token0
  high: BigDecimal!
  # low price of token0
  low: BigDecimal!
  # close price of token0
  close: BigDecimal!
}

type PoolWeekData @entity {
  # timestamp rounded to current day by dividing by 604800
  id: ID!
  # timestamp rounded to current day by dividing by 604800
  week: Int!
  # pointer to pool
  pool: Pool!
  # in range liquidity at end of period
  liquidity: BigInt!
  # current price tracker at end of period
  sqrtPrice: BigInt!
  #
  untrackedVolumeUSD: BigDecimal!
  # price of token0 - derived from sqrtPrice
  token0Price: BigDecimal!
  # price of token1 - derived from sqrtPrice
  token1Price: BigDecimal!
  # current tick at end of period
  tick: BigInt
  # tracker for global fee growth
  feeGrowthGlobal0X128: BigInt!
  # tracker for global fee growth
  feeGrowthGlobal1X128: BigInt!
  # tvl derived in USD at end of period
  tvlUSD: BigDecimal!
  feesToken0: BigDecimal!
  feesToken1: BigDecimal!
  # volume in token0
  volumeToken0: BigDecimal!
  # volume in token1
  volumeToken1: BigDecimal!
  # volume in USD
  volumeUSD: BigDecimal!
  # fees in USD
  feesUSD: BigDecimal!
  # numebr of transactions during period
  txCount: BigInt!
  # opening price of token0
  open: BigDecimal!
  # high price of token0
  high: BigDecimal!
  # low price of token0
  low: BigDecimal!
  # close price of token0
  close: BigDecimal!
  # APR calculations
  aprPercentage: BigDecimal!
  weeklyFeeUSD: BigDecimal!
}

type PoolMonthData @entity {
  # timestamp rounded to current day by dividing by 2592000
  id: ID!
  # timestamp rounded to current day by dividing by 2592000
  month: Int!
  # pointer to pool
  pool: Pool!
  # in range liquidity at end of period
  liquidity: BigInt!
  # current price tracker at end of period
  sqrtPrice: BigInt!
  #
  untrackedVolumeUSD: BigDecimal!
  # price of token0 - derived from sqrtPrice
  token0Price: BigDecimal!
  # price of token1 - derived from sqrtPrice
  token1Price: BigDecimal!
  # current tick at end of period
  tick: BigInt
  # tracker for global fee growth
  feeGrowthGlobal0X128: BigInt!
  # tracker for global fee growth
  feeGrowthGlobal1X128: BigInt!
  # tvl derived in USD at end of period
  tvlUSD: BigDecimal!
  feesToken0: BigDecimal!
  feesToken1: BigDecimal!
  # volume in token0
  volumeToken0: BigDecimal!
  # volume in token1
  volumeToken1: BigDecimal!
  # volume in USD
  volumeUSD: BigDecimal!
  # fees in USD
  feesUSD: BigDecimal!
  # numebr of transactions during period
  txCount: BigInt!
  # opening price of token0
  open: BigDecimal!
  # high price of token0
  high: BigDecimal!
  # low price of token0
  low: BigDecimal!
  # close price of token0
  close: BigDecimal!
  # APR calculations
  aprPercentage: BigDecimal!
  monthlyFeeUSD: BigDecimal!
}

type LiquidatorData @entity {
  # user addresss # pool address
  id: ID!
  # address of token 0
  token0: Token!
  # address of token 1
  token1: Token!
  # amount of token 0 in user deposited
  amount0: BigDecimal!
  # amount of token 0 in user deposited
  amount1: BigDecimal!
  #total amount of liquidity in USD
  totalLiquidityUsd: BigDecimal!
  # pool address
  pool: Pool!
  # user address
  account: Account!
}

type TickHourData @entity {
  # format: <pool address>-<tick index>-<timestamp>
  id: ID!
  # unix timestamp for start of hour
  periodStartUnix: Int!
  # pointer to pool
  pool: Pool!
  # pointer to tick
  tick: Tick!
  # total liquidity pool has as tick lower or upper at end of period
  liquidityGross: BigInt!
  # how much liquidity changes when tick crossed at end of period
  liquidityNet: BigInt!
  # hourly volume of token0 with this tick in range
  volumeToken0: BigDecimal!
  # hourly volume of token1 with this tick in range
  volumeToken1: BigDecimal!
  # hourly volume in derived USD with this tick in range
  volumeUSD: BigDecimal!
  # fees in USD
  feesUSD: BigDecimal!
}

# Data accumulated and condensed into day stats for each exchange
# Note: this entity gets saved only if there is a change during the day
type TickDayData @entity {
  # format: <pool address>-<tick index>-<timestamp>
  id: ID!
  # timestamp rounded to current day by dividing by 86400
  date: Int!
  # pointer to pool
  pool: Pool!
  # pointer to tick
  tick: Tick!
  # total liquidity pool has as tick lower or upper at end of period
  liquidityGross: BigInt!
  # how much liquidity changes when tick crossed at end of period
  liquidityNet: BigInt!
  # hourly volume of token0 with this tick in range
  volumeToken0: BigDecimal!
  # hourly volume of token1 with this tick in range
  volumeToken1: BigDecimal!
  # hourly volume in derived USD with this tick in range
  volumeUSD: BigDecimal!
  # fees in USD
  feesUSD: BigDecimal!
  # vars needed for fee computation
  feeGrowthOutside0X128: BigInt!
  feeGrowthOutside1X128: BigInt!
}

type TokenDayData @entity {
  # token address concatendated with date
  id: ID!
  # timestamp rounded to current day by dividing by 86400
  date: Int!
  # pointer to token
  token: Token!
  # volume in token units
  volume: BigDecimal!
  # volume in derived USD
  volumeUSD: BigDecimal!
  # volume in USD even on pools with less reliable USD values
  untrackedVolumeUSD: BigDecimal!
  # liquidity across all pools in token units
  totalValueLocked: BigDecimal!
  # liquidity across all pools in derived USD
  totalValueLockedUSD: BigDecimal!
  # price at end of period in USD
  priceUSD: BigDecimal!
  # fees in USD
  feesUSD: BigDecimal!
  # opening price USD
  open: BigDecimal!
  # high price USD
  high: BigDecimal!
  # low price USD
  low: BigDecimal!
  # close price USD
  close: BigDecimal!
}

type TokenHourData @entity {
  # token address concatendated with date
  id: ID!
  # unix timestamp for start of hour
  periodStartUnix: Int!
  # pointer to token
  token: Token!
  # volume in token units
  volume: BigDecimal!
  # volume in derived USD
  volumeUSD: BigDecimal!
  # volume in USD even on pools with less reliable USD values
  untrackedVolumeUSD: BigDecimal!
  # liquidity across all pools in token units
  totalValueLocked: BigDecimal!
  # liquidity across all pools in derived USD
  totalValueLockedUSD: BigDecimal!
  # price at end of period in USD
  priceUSD: BigDecimal!
  # fees in USD
  feesUSD: BigDecimal!
  # opening price USD
  open: BigDecimal!
  # high price USD
  high: BigDecimal!
  # low price USD
  low: BigDecimal!
  # close price USD
  close: BigDecimal!
}

type DepositRaisedToken @entity {
  # transaction hash + "#" + index in mints Transaction array
  id: ID!
  # which txn the mint was included in
  transaction: Transaction!
  # time of txn
  timestamp: BigInt!
  # deposit raised token
  amount: BigInt!
  # txn origin
  origin: Bytes! # the EOA that initiated the txn
  # order within the txn
  logIndex: BigInt
  # the address of contract which is deposited by user
  poolAddress: Bytes
}

type Refund @entity {
  # transaction hash + "#" + index in mints Transaction array
  id: ID!
  # which txn the mint was included in
  transaction: Transaction!
  # time of txn
  timestamp: BigInt!
  # deposit raised token
  amount: BigInt!
  # txn origin
  origin: Bytes! # the EOA that initiated the txn
  # order within the txn
  logIndex: BigInt
  # the address of contract which is refunded by user
  poolAddress: Bytes!
}

type ClaimLp @entity {
  # transaction hash + "#" + index in mints Transaction array
  id: ID!
  # which txn the mint was included in
  transaction: Transaction!
  # time of txn
  timestamp: BigInt!
  # deposit raised token
  amount: BigInt!
  # txn origin
  origin: Bytes! # the EOA that initiated the txn
  # order within the txn
  logIndex: BigInt
  # the address of contract which is refund by user
  poolAddress: Bytes!
}

type Plugin @entity {
  id: ID!
  pool: Pool!
  collectedFeesToken0: BigDecimal!
  collectedFeesToken1: BigDecimal!
  collectedFeesUSD: BigDecimal!
}

type FeeHourData @entity {
  #
  id: ID!
  #
  pool: String!
  #
  fee: BigInt!
  #
  changesCount: BigInt!
  #
  timestamp: BigInt!
  #
  minFee: BigInt!
  #
  maxFee: BigInt!
  #
  startFee: BigInt!
  #
  endFee: BigInt!
}

######################################################### ICHIVaultFactory
type IchiVault @entity {
  id: ID! # the address of the ichi vault
  sender: Bytes! # the address of the signer of the transaction, usually the gnosis vault
  tokenA: Bytes! # the address of the token contract that is token0 in the vault
  allowTokenA: Boolean! # determines if the liquidity provision is one-side or two-sided.
  tokenB: Bytes! # the address of the token contract tat is token1 in the vault
  allowTokenB: Boolean! # determines if the liquidity provision is one-side or two-sided.
  count: BigInt! # the number of vaults that have been created to date
  createdAtTimestamp: BigInt! # the timestamp at which the vault was created
  holdersCount: Int! # number of vault LP holders
  pool: Pool!
  totalShares: BigDecimal! #current total shares sums allVaultShares
  vaultShares: [VaultShare!]! @derivedFrom(field: "vault")
  vaultDeposits: [VaultDeposit!]! @derivedFrom(field: "vault")
  vaultWithdraws: [VaultWithdraw!]! @derivedFrom(field: "vault")
  vaultApprovals: [VaultApproval!]! @derivedFrom(field: "vault")
  vaultAffiliates: [VaultAffiliate!]! @derivedFrom(field: "vault")
  vaultHysteresis: [VaultHysteresis!]! @derivedFrom(field: "vault")
  vaultCollectFees: [VaultCollectFee!]! @derivedFrom(field: "vault")
  maxTotalSupply: [MaxTotalSupply!]! @derivedFrom(field: "vault")
  vaultOwnershipTransferred: [VaultOwnershipTransferred!]! @derivedFrom(field: "vault")
  vaultRebalance: [VaultRebalance!]! @derivedFrom(field: "vault")
  vaultSetTwapPeriod: [VaultSetTwapPeriod!]! @derivedFrom(field: "vault")
  vaultTransfer: [VaultTransfer!]! @derivedFrom(field: "vault")
}

type VaultShare @entity {
  id: ID!
  user: Account!
  vault: IchiVault!
  vaultShareBalance: BigDecimal!
}

######################################################### Vault
type VaultAffiliate @entity {
  id: ID! # the transaction hash and the log index separated by a hyphen
  vault: IchiVault!
  sender: Bytes! # the address of the signer of the transaction
  affiliate: Bytes! # the address of the new affiliate that will receive a split of the trading fees
}

type VaultApproval @entity {
  id: ID! # the transaction hash and the log index separated by a hyphen
  vault: IchiVault!
  owner: Bytes! # the address of the owner of the spender account
  spender: Bytes! # the address for which the allowance is being set
  value: BigInt! # the new allowance
}

type DeployICHIVault @entity {
  id: ID! # the transaction hash and the log index separated by a hyphen
  vault: IchiVault!
  sender: Bytes! # the address of the signer, usually the ICHIVaultFactory
  pool: Pool! # the address of the UniswapV3 pool that contains the assets in the vault
  allowToken0: Boolean! # determines if the liquidity provision is one-side or two-sided.
  allowToken1: Boolean! # determines if the liquidity provision is one-side or two-sided.
  owner: Bytes! # the owner of the ichi vault
  twapPeriod: BigInt! # the average time period
}

type VaultDeposit @entity {
  id: ID! # the transaction hash and the log index separated by a hyphen
  vault: IchiVault! # the address of the pool in which the deposit occurred
  sender: Bytes! # the signer of the deposit transaction
  to: Bytes! # the address to which liquidity pool tokens are minted
  shares: BigInt! # the quantity of liquidity tokens minted as a result of deposit
  amount0: BigInt! # the amount of token0 to be deposited
  amount1: BigInt! # the amount of token1 to be deposited
  tick: Int! # the current price tick
  createdAtTimestamp: BigInt! # the timestamp at which the deposit occurred
  sqrtPrice: BigInt! # The sqrtPrice at that moment in the pool that corresponds to the vault
  totalAmount0: BigInt! # the total amount of token0 in the vault after the event has occurred
  totalAmount1: BigInt! # the total amount of token1 in the vault after the event has occurred
  totalAmount0BeforeEvent: BigInt! # the total amount of token0 in the vault before the event has occurred
  totalAmount1BeforeEvent: BigInt! # the total amount of token1 in the vault before the event has occurred
  totalSupply: BigInt! # the total supply of the liquidity pool token that is used by the vault
}

type VaultCollectFee @entity {
  id: ID! # the transaction hash and the log index separated by a hyphen
  vault: IchiVault! # the address of the pool in which the CollectFees function was called
  sender: Bytes! # the address of the signer of the CollectFees transaction
  tick: Int! # the current price tick
  createdAtTimestamp: BigInt! # the timestamp at which the fee collection occurred
  sqrtPrice: BigInt! # The sqrtPrice at that moment in the pool that corresponds to the vault
  feeAmount0: BigInt! # the collected fee amount of token0
  feeAmount1: BigInt! # the collected fee amount of token1
  totalAmount0: BigInt! # the total amount of token0 in the vault after the event has occurred
  totalAmount1: BigInt! # the total amount of token1 in the vault after the event has occurred
  totalSupply: BigInt! # the total supply of the liquidity pool token that is used by the vault
}

type VaultDepositMax @entity {
  id: ID! # the transaction hash and the log index separated by a hyphen
  vault: IchiVault! # the address of the pool in which the DepositMax was set
  sender: Bytes! # the address of the signer of the transaction that set the depoist max
  deposit0Max: BigInt! # the depositMax amount of token0
  deposit1Max: BigInt! # the depositMax amount of token1
}

type VaultHysteresis @entity {
  id: ID! # the transaction hash and the log index separated by a hyphen
  vault: IchiVault! # the address of the pool in which the hysteresis was set
  sender: Bytes! # the address of the signer of the transaction
  hysteresis: BigInt! # the new hysteresis threshold in percentage
}

type MaxTotalSupply @entity {
  id: ID! # the transaction hash and the log index separated by a hyphen
  vault: IchiVault! # the address of the vault in which the MaxTotalSupply was set
  sender: Bytes! # the address of signer of the transaction
  maxTotalSupply: BigInt! # the amount that is set as the maxTotalSupply
}

type VaultOwnershipTransferred @entity {
  id: ID! # the transaction hash and the log index separated by a hyphen
  vault: IchiVault! # the address of the vault in which the ownership has been transferred
  previousOwner: Bytes! # the address of the previous owner
  newOwner: Bytes! # the address of the new owner
}

type VaultRebalance @entity {
  id: ID! # the transaction hash and the log index separated by a hyphen
  vault: IchiVault! # the vault in which the rebalance has occurred
  tick: Int! # the current price tick
  createdAtTimestamp: BigInt! # the timestamp at which the vault was created
  sqrtPrice: BigInt! # The sqrtPrice at that moment in the pool that corresponds to the vault
  totalAmount0: BigInt! # the total amount of token0 in the vault
  totalAmount1: BigInt! # the total amount of token1 in the vault
  feeAmount0: BigInt! # the fees for token0
  feeAmount1: BigInt! # the fees for token1
  totalSupply: BigInt! # the total supply of the liquidity pool token that is used by the vault
}

type VaultSetTwapPeriod @entity {
  id: ID! # the transaction hash and the log index separated by a hyphen
  vault: IchiVault! # the vault in which the twap period has been set
  sender: Bytes! # the address that was the signer of the transaction
  newTwapPeriod: BigInt! # the new twap period of the vault
}

type VaultTransfer @entity {
  id: ID! # the transaction hash and the log index separated by a hyphen
  vault: IchiVault! # the address of the vault in which the transfer has occurred
  from: Bytes! # the address that is the sender of the token
  to: Bytes! # the address that is the recipient of the transfer
  value: BigInt! # the amount of the token that is transferred.
  tick: Int! # the current price tick
  createdAtTimestamp: BigInt! # the timestamp at which the transfer has happened
  sqrtPrice: BigInt! # the sqrt price of the pool that the vault is deployed in at the time of the event
  totalAmount0: BigInt! # the total amount of token0 in the vault after the event
  totalAmount1: BigInt! # the total amount of token1 in the vault after the event
  totalSupply: BigInt! # the total supply of the liquidity pool token that is used by the vault
}

type VaultWithdraw @entity {
  id: ID! # the transaction hash and the log index separated by a hyphen
  vault: IchiVault! # the address of the vault in which the transfer has occurred
  sender: Bytes! # the signer of the transaction in which the withdraw occurred
  to: Bytes! # the address to which the liquidity tokens are minted
  shares: BigInt! # the quantity of liquidity tokens minted as a result of a withdraw
  amount0: BigInt! # the amount of token0 that is being withdrawn
  amount1: BigInt! # the amount of token1 that is being withdrawn
  tick: Int! # the current price tick
  createdAtTimestamp: BigInt! # the timestamp at which the withdraw occurred
  sqrtPrice: BigInt! # the sqrt price of the pool that the vault is deployed in at the time of the event
  totalAmount0: BigInt! # the total amount of token0 in the vault after the event
  totalAmount1: BigInt! # the total amount of token1 in the vault after the event
  totalAmount0BeforeEvent: BigInt! # the total amount of token0 in the vault after the event
  totalAmount1BeforeEvent: BigInt! # the total amount of token1 in the vault after the event
  totalSupply: BigInt! # the total supply of the liquidity pool token that is used by the vault
}

# MEME Race Event
type MemeRacer @entity {
  id: ID! # token address
  token: Token!
  hourData: [MemeRacerHourData!]! @derivedFrom(field: "racer")
  currentScore: BigDecimal! # current market cap
  totalSupply: BigInt!
}

type MemeRacerHourData @entity {
  id: ID! # token address + timestamp
  racer: MemeRacer!
  usdAtThisHour: BigDecimal!
  timestamp: BigInt! # start of hour timestamp
  score: BigDecimal! # market cap at this hour
}
